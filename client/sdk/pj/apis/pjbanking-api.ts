/* tslint:disable */
/* eslint-disable */
/**
 * PJ Banking API
 * OpenAPI specification describing the PJ banking endpoints exposed by the Finance CoPilot backend. These routes power bank account discovery, transaction browsing and financial summaries for PJ clients. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@financecopilot.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccountsResponse } from '../models';
// @ts-ignore
import type { BankTransactionListResponse } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SummaryResponse } from '../models';
/**
 * PJBankingApi - axios parameter creator
 */
export const PJBankingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the bank accounts that are available to the authenticated PJ client. Only a subset of bank account fields is exposed to avoid leaking sensitive identifiers. 
         * @summary List bank accounts available for the authenticated PJ client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPjAccountsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pj/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calculates aggregated totals, KPIs and daily net flow series for a PJ bank account inside the requested date range. When the date range is omitted the backend automatically expands it to the available transaction history. 
         * @summary Retrieve aggregated cash-flow summary for a PJ client account
         * @param {string} clientId Unique identifier for the PJ client
         * @param {string} bankAccountId Unique identifier for the bank account that must be accessible by the authenticated user
         * @param {string} [from] Start of the reporting window in DD/MM/YYYY format
         * @param {string} [to] End of the reporting window in DD/MM/YYYY format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPjSummaryGet: async (clientId: string, bankAccountId: string, from?: string, to?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('apiPjSummaryGet', 'clientId', clientId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('apiPjSummaryGet', 'bankAccountId', bankAccountId)
            const localVarPath = `/api/pj/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (bankAccountId !== undefined) {
                localVarQueryParameter['bankAccountId'] = bankAccountId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the paginated bank transactions imported for a specific PJ bank account. Transactions are filtered by the optional period and sorted by posting date. 
         * @summary List paginated bank transactions for a PJ client account
         * @param {string} clientId Unique identifier for the PJ client
         * @param {string} bankAccountId Unique identifier for the bank account that must be accessible by the authenticated user
         * @param {string} [from] Start of the reporting window in DD/MM/YYYY format
         * @param {string} [to] End of the reporting window in DD/MM/YYYY format
         * @param {number} [page] Results page to return (defaults to 1)
         * @param {number} [limit] Number of items per page (defaults to 50, capped at 200)
         * @param {ApiPjTransactionsGetSortEnum} [sort] Sort direction for the transaction date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPjTransactionsGet: async (clientId: string, bankAccountId: string, from?: string, to?: string, page?: number, limit?: number, sort?: ApiPjTransactionsGetSortEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('apiPjTransactionsGet', 'clientId', clientId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('apiPjTransactionsGet', 'bankAccountId', bankAccountId)
            const localVarPath = `/api/pj/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (bankAccountId !== undefined) {
                localVarQueryParameter['bankAccountId'] = bankAccountId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PJBankingApi - functional programming interface
 */
export const PJBankingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PJBankingApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the bank accounts that are available to the authenticated PJ client. Only a subset of bank account fields is exposed to avoid leaking sensitive identifiers. 
         * @summary List bank accounts available for the authenticated PJ client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPjAccountsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPjAccountsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PJBankingApi.apiPjAccountsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Calculates aggregated totals, KPIs and daily net flow series for a PJ bank account inside the requested date range. When the date range is omitted the backend automatically expands it to the available transaction history. 
         * @summary Retrieve aggregated cash-flow summary for a PJ client account
         * @param {string} clientId Unique identifier for the PJ client
         * @param {string} bankAccountId Unique identifier for the bank account that must be accessible by the authenticated user
         * @param {string} [from] Start of the reporting window in DD/MM/YYYY format
         * @param {string} [to] End of the reporting window in DD/MM/YYYY format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPjSummaryGet(clientId: string, bankAccountId: string, from?: string, to?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPjSummaryGet(clientId, bankAccountId, from, to, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PJBankingApi.apiPjSummaryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the paginated bank transactions imported for a specific PJ bank account. Transactions are filtered by the optional period and sorted by posting date. 
         * @summary List paginated bank transactions for a PJ client account
         * @param {string} clientId Unique identifier for the PJ client
         * @param {string} bankAccountId Unique identifier for the bank account that must be accessible by the authenticated user
         * @param {string} [from] Start of the reporting window in DD/MM/YYYY format
         * @param {string} [to] End of the reporting window in DD/MM/YYYY format
         * @param {number} [page] Results page to return (defaults to 1)
         * @param {number} [limit] Number of items per page (defaults to 50, capped at 200)
         * @param {ApiPjTransactionsGetSortEnum} [sort] Sort direction for the transaction date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPjTransactionsGet(clientId: string, bankAccountId: string, from?: string, to?: string, page?: number, limit?: number, sort?: ApiPjTransactionsGetSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPjTransactionsGet(clientId, bankAccountId, from, to, page, limit, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PJBankingApi.apiPjTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PJBankingApi - factory interface
 */
export const PJBankingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PJBankingApiFp(configuration)
    return {
        /**
         * Returns the bank accounts that are available to the authenticated PJ client. Only a subset of bank account fields is exposed to avoid leaking sensitive identifiers. 
         * @summary List bank accounts available for the authenticated PJ client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPjAccountsGet(options?: RawAxiosRequestConfig): AxiosPromise<AccountsResponse> {
            return localVarFp.apiPjAccountsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Calculates aggregated totals, KPIs and daily net flow series for a PJ bank account inside the requested date range. When the date range is omitted the backend automatically expands it to the available transaction history. 
         * @summary Retrieve aggregated cash-flow summary for a PJ client account
         * @param {string} clientId Unique identifier for the PJ client
         * @param {string} bankAccountId Unique identifier for the bank account that must be accessible by the authenticated user
         * @param {string} [from] Start of the reporting window in DD/MM/YYYY format
         * @param {string} [to] End of the reporting window in DD/MM/YYYY format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPjSummaryGet(clientId: string, bankAccountId: string, from?: string, to?: string, options?: RawAxiosRequestConfig): AxiosPromise<SummaryResponse> {
            return localVarFp.apiPjSummaryGet(clientId, bankAccountId, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the paginated bank transactions imported for a specific PJ bank account. Transactions are filtered by the optional period and sorted by posting date. 
         * @summary List paginated bank transactions for a PJ client account
         * @param {string} clientId Unique identifier for the PJ client
         * @param {string} bankAccountId Unique identifier for the bank account that must be accessible by the authenticated user
         * @param {string} [from] Start of the reporting window in DD/MM/YYYY format
         * @param {string} [to] End of the reporting window in DD/MM/YYYY format
         * @param {number} [page] Results page to return (defaults to 1)
         * @param {number} [limit] Number of items per page (defaults to 50, capped at 200)
         * @param {ApiPjTransactionsGetSortEnum} [sort] Sort direction for the transaction date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPjTransactionsGet(clientId: string, bankAccountId: string, from?: string, to?: string, page?: number, limit?: number, sort?: ApiPjTransactionsGetSortEnum, options?: RawAxiosRequestConfig): AxiosPromise<BankTransactionListResponse> {
            return localVarFp.apiPjTransactionsGet(clientId, bankAccountId, from, to, page, limit, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PJBankingApi - object-oriented interface
 */
export class PJBankingApi extends BaseAPI {
    /**
     * Returns the bank accounts that are available to the authenticated PJ client. Only a subset of bank account fields is exposed to avoid leaking sensitive identifiers. 
     * @summary List bank accounts available for the authenticated PJ client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPjAccountsGet(options?: RawAxiosRequestConfig) {
        return PJBankingApiFp(this.configuration).apiPjAccountsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calculates aggregated totals, KPIs and daily net flow series for a PJ bank account inside the requested date range. When the date range is omitted the backend automatically expands it to the available transaction history. 
     * @summary Retrieve aggregated cash-flow summary for a PJ client account
     * @param {string} clientId Unique identifier for the PJ client
     * @param {string} bankAccountId Unique identifier for the bank account that must be accessible by the authenticated user
     * @param {string} [from] Start of the reporting window in DD/MM/YYYY format
     * @param {string} [to] End of the reporting window in DD/MM/YYYY format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPjSummaryGet(clientId: string, bankAccountId: string, from?: string, to?: string, options?: RawAxiosRequestConfig) {
        return PJBankingApiFp(this.configuration).apiPjSummaryGet(clientId, bankAccountId, from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the paginated bank transactions imported for a specific PJ bank account. Transactions are filtered by the optional period and sorted by posting date. 
     * @summary List paginated bank transactions for a PJ client account
     * @param {string} clientId Unique identifier for the PJ client
     * @param {string} bankAccountId Unique identifier for the bank account that must be accessible by the authenticated user
     * @param {string} [from] Start of the reporting window in DD/MM/YYYY format
     * @param {string} [to] End of the reporting window in DD/MM/YYYY format
     * @param {number} [page] Results page to return (defaults to 1)
     * @param {number} [limit] Number of items per page (defaults to 50, capped at 200)
     * @param {ApiPjTransactionsGetSortEnum} [sort] Sort direction for the transaction date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiPjTransactionsGet(clientId: string, bankAccountId: string, from?: string, to?: string, page?: number, limit?: number, sort?: ApiPjTransactionsGetSortEnum, options?: RawAxiosRequestConfig) {
        return PJBankingApiFp(this.configuration).apiPjTransactionsGet(clientId, bankAccountId, from, to, page, limit, sort, options).then((request) => request(this.axios, this.basePath));
    }
}

export const ApiPjTransactionsGetSortEnum = {
    asc: 'asc',
    desc: 'desc'
} as const;
export type ApiPjTransactionsGetSortEnum = typeof ApiPjTransactionsGetSortEnum[keyof typeof ApiPjTransactionsGetSortEnum];
