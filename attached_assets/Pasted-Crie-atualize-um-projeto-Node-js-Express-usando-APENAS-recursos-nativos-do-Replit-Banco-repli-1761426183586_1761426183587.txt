Crie/atualize um projeto Node.js + Express usando APENAS recursos nativos do Replit:
- Banco: @replit/database (KV)
- Sess√£o: express-session
- Upload: multer
- OFX: ofx-parse
- CSV: csv-parse/sync
- Datas p√∫blicas: DD/MM/YYYY SEMPRE
- Linguagem da interface: pt-BR

==============================
‚ö†Ô∏è PRINC√çPIO DE ISOLA√á√ÉO PF x PJ
==============================
- A vis√£o PF e a vis√£o PJ s√£o independentes e N√ÉO podem se impactar.
- No banco, separe por NAMESPACES e CHAVES distintas:
  - PF: `pf_*`
  - PJ: `pj_*`
- Toda rota deve validar `scope` (PF ou PJ) e `clientId` coerente com o scope.
- Se um usu√°rio tiver os dois perfis (PF e PJ), trate como **dois clientIds diferentes** (ex.: "lucas_pf" e "empresa_xyz_pj").

==============================
üì¶ DEPEND√äNCIAS (package.json)
==============================
Scripts:
  "start": "node server.js"
Depend√™ncias:
  express, express-session, cors, @replit/database, multer, ofx-parse, csv-parse, uuid, iconv-lite

==============================
üîê AUTENTICA√á√ÉO E AUTORIZA√á√ÉO
==============================
- Login com sess√£o (express-session).
- Usu√°rios: { email, passwordHash, role: "consultor"|"cliente", name, scopes: ["PF"|"PJ"|"BOTH"], clients: [clientId...] }
- Middleware `authRequired(role?)` e `scopeRequired("PF"|"PJ")`.
- Um consultor s√≥ acessa `clientId` dentro dos seus `clients`. Um cliente s√≥ acessa os seus.
- Rotas HTML de login /logout simples:
  - GET /login (form)
  - POST /auth/login
  - POST /auth/logout
  - GET /auth/me (json)

==============================
üóÇÔ∏è ESTRUTURA DE DADOS (REPLIT DB)
==============================
# Meta
- users: { [email]: {id, email, passwordHash, role, scopes, clients[]} }
- pj_clients: { [clientId]: { id, name, cnpj?, email?, assignedTo: [consultantUserId], createdAt } }
- pf_clients: (N√ÉO implementar aqui; apenas manter separa√ß√£o)

# Configura√ß√µes PJ
- pj_payment_methods_${clientId}: [
   { id, name, gateway?, taxa_pct?, taxa_fixa?, liquidacao?("D+X"|"D+30_por_parcela"|"D+1"), metadata? }
]

# Vendas (headers) e legs (multi-pagamento) PJ
- pj_sales_${clientId}: [
   { saleId, date:"DD/MM/YYYY", invoiceNumber?, customer:{name,doc?,email?,telefone?}, channel, status:"aberta|fechada|cancelada",
     grossAmount, netAmount, comment?, legs:[saleLegId...] }
]
- pj_sale_legs_${clientId}: [
   { saleLegId, saleId, method:"pix|credito|debito|boleto|dinheiro|transferencia|link|gateway|outro",
     gateway?, authorizedCode?, installments:1, grossAmount, fees, netAmount, status:"autorizado|pago|liquidado|estornado|chargeback|cancelado",
     provider:"manual|gateway|pluggy", providerPaymentId?, providerAccountId?, settlementPlan:[ {n, due:"DD/MM/YYYY", expected, receivedTxId?, receivedAt?} ],
     reconciliation:{ state:"pendente|parcial|conciliado|divergente", notes? },
     events:[ {type:"created|authorized|paid|settled|refund|chargeback", at:"DD/MM/YYYY", meta?} ] }
]

# Ledger PJ (opcional; deriv√°vel)
- pj_ledger_${clientId}: [
   { id, group:"RECEITA|DEDUCOES_RECEITA|GEA|COMERCIAL_MKT|FINANCEIRAS|OUTRAS",
     subcategory?, amount(+/-), recognizedAt:"DD/MM/YYYY", cashAt?:"DD/MM/YYYY",
     excludeFromMargin?:boolean, origin:"sale_leg|manual|bank|gateway", saleId?, saleLegId?, note? }
]

# Extratos banc√°rios PJ (OFX/OF)
- pj_bank_tx_${clientId}: [
   { bankTxId, date:"DD/MM/YYYY", desc, amount(+/-), accountId?, fitid?, sourceHash?, linkedLegs:[{saleLegId, nParcela?}], reconciled?:boolean }
]

# Relat√≥rios
- pj_reports_${clientId}: { [period:"AAAA-MM"]: { kpis, html } }

# Open Finance (opcional; j√° preparado, mas n√£o obrigat√≥rio agora)
- pj_of_items_${clientId}: [{ itemId, institutionName, status, lastSyncAt }]
- pj_of_accounts_${clientId}: [{ accountId, name, type, currency }]
- pj_of_sync_meta_${clientId}: { lastTxSyncAt?, lastPosSyncAt? }

==============================
üß© UTILIT√ÅRIOS
==============================
- formatBR(isoDateOrBR) ‚Üí sempre retorna "DD/MM/YYYY"
- toISOFromBR("DD/MM/YYYY") ‚Üí "YYYY-MM-DD"
- getMonthKey("DD/MM/YYYY") ‚Üí "AAAA-MM"
- inPeriod("DD/MM/YYYY", "AAAA-MM") ‚Üí boolean
- sum(array) seguro contra null/undefined
- ensureArray(dbKey) ‚Üí []

==============================
üì• IMPORTA√á√ÉO DE DADOS (PJ)
==============================
1) OFX (extrato banc√°rio PJ)
POST /pj/import/ofx
- multipart: { ofx:file, clientId }
- Gera fileHash (sha256). Se existir igual, 409 "OFX duplicado".
- Parseia com ofx-parse; normaliza transa√ß√µes em pj_bank_tx_${clientId}:
   { bankTxId(uuid), date(DD/MM/YYYY), desc, amount, accountId, fitid, sourceHash:fileHash, reconciled:false }
- Dedup por fitid ou (date+amount+desc).
- Resposta: { imported, total }

2) CSV de vendas (multi-pagamento)
POST /pj/sales/importCsv
- multipart: { csv:file, clientId }
- Layout: 1 LINHA = 1 LEG
  date;invoiceNumber;customer_name;customer_doc;channel;item;qty;unit_price;discount;payment_method;gateway;installments;gross_leg;fees_leg;status;comment
- Backend agrupa por invoiceNumber+date ‚Üí cria/atualiza header (pj_sales) + legs (pj_sale_legs).
- C√°lculos: net_leg = gross_leg - fees_leg; header.gross/net = soma dos legs.
- Dedup do LEG por (invoiceNumber+gateway+authorizedCode) OU fallback (date+gross_leg+payment_method+gateway).
- Sempre formatar datas em DD/MM/YYYY.

3) Inclus√£o manual de venda (multi-pagamento)
POST /pj/sales/add
Body:
{
  clientId, date:"DD/MM/YYYY", invoiceNumber?, customer:{...}, channel, comment?,
  legs:[ { method, gateway?, installments, grossAmount, fees, authorizedCode? } ]
}
- Gera saleId e saleLegId p/ cada leg.
- Gera settlementPlan conforme regras do m√©todo/gateway em pj_payment_methods_${clientId}:
   - "D+X": parcela √∫nica due = date + X dias
   - "D+30_por_parcela": N parcelas due a cada 30 dias
   - "D+1": due = date + 1 dia
- Calcula header.gross/net e salva.

==============================
üîå INTEGRA√á√ïES DE PAGAMENTO (webhook/sync) ‚Äî PJ
==============================
1) Webhook
POST /pj/integrations/payments/webhook/:gateway
- Idempot√™ncia por eventId do gateway.
- Mapeia evento ‚Üí leg por providerPaymentId ou (invoiceNumber+authorizedCode).
- Atualiza status do leg, fees, net, adiciona event e marca parc/settlement recebida quando houver refer√™ncia banc√°ria.
- Responde { ok:true } sempre que idempotente.

2) Pull manual (sync)
POST /pj/integrations/payments/sync
Body: { clientId, gateway, from?, to?, full? }
- Busca cobran√ßas no gateway (mock se n√£o houver credencial).
- Upsert em legs por providerPaymentId.
- Recalcula header.

==============================
üßæ CONCILIA√á√ÉO BANC√ÅRIA (PJ)
==============================
- Sugerir match por parcela do settlementPlan.
POST /pj/reconciliation/suggest
Body: { clientId, saleLegId }
L√≥gica:
  - Busca parcela(s) pendentes no leg.
  - Tenta match por:
     1) valor == expected e date ‚âà due (¬±1..3 dias)
     2) fallback: agrupar m√∫ltiplos cr√©ditos do mesmo dia para formar expected (marketplaces)
  - Retorna sugest√µes: [{ bankTxId, date, amount, score }]

POST /pj/reconciliation/confirm
Body: { clientId, saleLegId, matches:[{ bankTxId }], note? }
- Marca parcela(s) como recebidas: receivedTxId, receivedAt=bankTx.date; reconciliation.state="conciliado" ou "parcial".
- Atualiza bank_tx vinculando o leg. Impede vincular a mesma bankTxId a duas parcelas diferentes (a n√£o ser que `allowGroup=true` futuro).

==============================
üìö PLANO DE CONTAS (PJ)
==============================
Macrogrupos:
- RECEITA
- DEDUCOES_RECEITA (taxas gateway, impostos sobre venda, devolu√ß√µes, descontos comerciais)
- GEA (Despesas Gerais e Administrativas)
- COMERCIAL_MKT
- FINANCEIRAS
- OUTRAS
Flags:
- `excludeFromMargin` (default=false). Por padr√£o **true** para subcategorias: "Distribui√ß√£o de Lucro", "Aporte/Resgate de caixa".

==============================
üìà M√âTRICAS (PJ)
==============================
Per√≠odo P = "AAAA-MM" (compet√™ncia, com recognizedAt das entradas/sa√≠das).

- Receita(P) = Œ£ amount onde group=RECEITA
- Deducoes(P) = Œ£ amount onde group=DEDUCOES_RECEITA (valor negativo)
- LucroBruto(P) = Receita(P) ‚àí |Deducoes(P)|
- DespesasTotais(P) = Œ£ |amount| onde group ‚àà {GEA, COMERCIAL_MKT, FINANCEIRAS, OUTRAS}
- LucroLiquido(P) = Receita(P) ‚àí |Deducoes(P)| ‚àí DespesasTotais(P)
- MargemAjustada(P) = Receita(P) ‚àí Œ£ |amount| (grupos de despesa) EXCLUINDO subcategorias com `excludeFromMargin=true`
- TicketM√©dio(P) = Receita(P) / N¬∫ de Vendas(P) (conta headers com date em P)
- N¬∫ de Vendas(P) = quantidade de headers em P
- Saldo de Caixa = soma de pj_bank_tx at√© o final do per√≠odo (ou 0 se vazio)

==============================
üßÆ DFC (m√©todo direto) ‚Äî PJ
==============================
GET /pj/dfc?clientId=...&period=AAAA-MM
- Operacional: entradas conciliadas de legs + sa√≠das operacionais (GEA, COMERCIAL_MKT, DEDUCOES_RECEITA consideradas como sa√≠da operacional).
- Investimento: lan√ßamentos marcados (ex.: CAPEX) ‚Äî pode ser subcategoria de OUTRAS com flag "investimento".
- Financiamento: empr√©stimos/juros/amortiza√ß√µes; Distribui√ß√£o de Lucros; Aportes/Resgates (via FINANCEIRAS).
Resposta:
{ period, caixaInicial?, operacional:{in,out,net}, investimento:{in,out,net}, financiamento:{in,out,net}, caixaFinal }

==============================
üõ†Ô∏è ENDPOINTS (PJ) ‚Äî RESUMO
==============================
# Config
POST /pj/payment-methods/upsert
GET  /pj/payment-methods/list?clientId=...

# Vendas
POST /pj/sales/add
POST /pj/sales/importCsv
GET  /pj/sales/list?clientId=...&from=...&to=...&status=...&method=...&channel=...
GET  /pj/sales/:saleId
PATCH /pj/sales/:saleId/leg/:saleLegId

# Concilia√ß√£o
POST /pj/reconciliation/suggest
POST /pj/reconciliation/confirm

# Ledger (opcional)
POST /pj/ledger/add (para despesas manuais fora de venda)
GET  /pj/ledger/list?clientId=...&period=...

# Dashboard do empres√°rio (PJ)
GET /api/pj/dashboard/summary?clientId=...&period=AAAA-MM
GET /api/pj/dashboard/trends?clientId=...&months=12
GET /api/pj/dashboard/top-costs?clientId=...&period=AAAA-MM&limit=5
GET /api/pj/dashboard/revenue-split?clientId=...&period=AAAA-MM
GET /api/pj/dashboard/sales-kpis?clientId=...&period=AAAA-MM
GET /dashboard/empresa/:clientId  (HTML com Chart.js via CDN)

# DFC
GET /pj/dfc?clientId=...&period=AAAA-MM

# Importa√ß√µes
POST /pj/import/ofx
POST /pj/import/csv (vendas fallback j√° coberta acima)

# Open Finance (opcional ‚Äî preparado, mas n√£o obrigat√≥rio)
POST /pj/openfinance/consent/start
POST /pj/openfinance/webhook     (idempotente)
POST /pj/openfinance/sync

==============================
üé® P√ÅGINA HTML ‚Äî /dashboard/empresa/:clientId
==============================
- Primeira dobra:
  - Seletor de per√≠odo (AAAA-MM)
  - Cards: Receita, Dedu√ß√µes, Lucro Bruto, Despesas, Lucro L√≠quido, Margem (valor e %), Saldo de Caixa
  - Top 3 custos (lista)
- Gr√°ficos:
  - Linha (12 meses): Receita x Lucro L√≠quido x Margem (R$) ‚Äî Chart.js (CDN)
  - Pizza: Origem da Receita (por canal ou subcategoria)
- KPIs comerciais: Ticket m√©dio, N¬∫ de vendas
- Todas as datas exibidas em DD/MM/YYYY quando houver.

==============================
üß™ REGRAS DE DEDUPLICA√á√ÉO
==============================
- OFX: por fitid e fileHash; ignorar linhas repetidas (date+amount+desc).
- CSV vendas: 1 linha = 1 LEG; dedup por (invoiceNumber+gateway+authorizedCode) ou fallback (date+gross+method+gateway).
- Webhooks: idempot√™ncia por eventId.
- Concilia√ß√£o: uma bankTx n√£o pode ser vinculada a duas parcelas sem "agrupamento" expl√≠cito.

==============================
‚ö†Ô∏è ERROS E MENSAGENS
==============================
- Sempre retornar mensagens claras em JSON para APIs; HTML s√≥ para p√°ginas.
- 400 para par√¢metros faltantes; 401 sem sess√£o; 403 sem permiss√£o; 409 duplicado; 500 erro interno.
- Nunca vazar dados PF em rotas PJ e vice-versa. Validar `scope` e `clientId`.

==============================
üöÄ STARTUP / SEED OPCIONAL
==============================
- Se `process.env.SEED_PJ === "1"`:
  - Criar usu√°rio consultor (consultor@demo.com / 123456) com scope PJ.
  - Criar `pj_clients` de exemplo, dados de 3 meses em `pj_sales` + `pj_sale_legs` + `pj_bank_tx` + `pj_ledger`.
  - Abrir console: 
    "üöÄ PJ pronto ‚Ä¢ Login em /login ‚Ä¢ Dashboard: /dashboard/empresa/<clientId>"
- Sempre logar:
  "üöÄ App Economia Di√°ria (PJ) na porta 3000"
  "üåê Dashboard Empres√°rio (PJ): /dashboard/empresa/:clientId"
  "üìÖ Datas p√∫blicas: DD/MM/YYYY"

==============================
üîí LEMBRETES FINAIS
==============================
- PF e PJ isolados por namespace e checagem de scope. Uma vis√£o NUNCA impacta a outra.
- Datas p√∫blicas em DD/MM/YYYY.
- Nada de servi√ßos externos obrigat√≥rios; tudo nativo Replit.
- C√≥digo limpo e comentado.
