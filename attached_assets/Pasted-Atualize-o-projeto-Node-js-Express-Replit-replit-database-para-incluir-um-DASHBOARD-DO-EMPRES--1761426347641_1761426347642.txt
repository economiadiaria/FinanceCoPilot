Atualize o projeto Node.js + Express (Replit, @replit/database) para incluir um DASHBOARD DO EMPRES√ÅRIO, com:

- P√ÅGINA: GET /dashboard/empresa/:clientId
- API de agrega√ß√µes:
  - GET /api/pj/dashboard/summary?clientId=...&period=AAAA-MM
  - GET /api/pj/dashboard/trends?clientId=...&months=12
  - GET /api/pj/dashboard/top-costs?clientId=...&period=AAAA-MM&limit=5
  - GET /api/pj/dashboard/revenue-split?clientId=...&period=AAAA-MM
  - GET /api/pj/dashboard/sales-kpis?clientId=...&period=AAAA-MM

Requisitos de UX (primeira dobra da tela):
1) Cards: Receita, Dedu√ß√µes, Lucro Bruto, Despesas, Lucro L√≠quido, Margem (ajustada), Saldo de Caixa.
2) Gr√°fico de tend√™ncia (√∫ltimos 6-12 meses): Receita x Lucro L√≠quido x Margem (R$).
3) Top 3 custos do m√™s (lista).
4) Origem da Receita (pizza).
5) Ticket m√©dio e N¬∫ de vendas.

Regras de neg√≥cio (j√° implementadas na API):
- Plano de contas:
  RECEITA,
  DEDUCOES_RECEITA,
  GEA (Despesas Gerais e Administrativas),
  COMERCIAL_MKT,
  FINANCEIRAS,
  OUTRAS.
- Lucro Bruto = Receita ‚àí |Dedu√ß√µes da Receita|.
- Lucro L√≠quido = Receita ‚àí |Dedu√ß√µes| ‚àí |GEA| ‚àí |COMERCIAL_MKT| ‚àí |FINANCEIRAS| ‚àí |OUTRAS|.
- Margem (ajustada) = Receita ‚àí Œ£ despesas **excluindo** subcategorias com `excludeFromMargin=true`.
  Por padr√£o, marque como `excludeFromMargin=true`:
    - "Distribui√ß√£o de Lucro"
    - "Aporte/Resgate de caixa"
  (estas duas costumam residir em FINANCEIRAS).
- Ticket M√©dio = Receita / N¬∫ de vendas (conta headers de venda no per√≠odo).
- N¬∫ de Vendas = quantidade de sales headers no per√≠odo.
- Saldo de Caixa = soma de bank_tx conciliadas (ou, se inexistente, 0). Exiba card ainda assim.

Fontes de dados (Replit DB):
- `sales_${clientId}`: headers de venda (cada uma pode ter v√°rios legs).
  { saleId, date: "DD/MM/YYYY", invoiceNumber, customer, channel, status, grossAmount, netAmount, comment, legs: [saleLegId] }
- `sale_legs_${clientId}`: legs/pagamentos da venda (pix/cr√©dito/etc.), com fees e settlementPlan.
- `ledger_${clientId}` (se existir) OU derivar de sales/legs + despesas manuais:
  Lan√ßamentos normalizados >> { id, group, subcategory, amount(¬±), recognizedAt(DD/MM/YYYY), cashAt?, excludeFromMargin?, origin, saleId?, saleLegId? }
  Observa√ß√£o: Se `ledger_${clientId}` N√ÉO existir, derive:
    - RECEITA = soma dos `grossAmount` dos legs das vendas no per√≠odo (recognizedAt = date da venda).
    - DEDUCOES_RECEITA = soma `fees` dos legs no per√≠odo.
    - Demais despesas: se n√£o houver tabela, retorne 0.
- `bank_tx_${clientId}`: transa√ß√µes banc√°rias (para Saldo de Caixa).
- `policies_${clientId}`: manter flags `excludeFromMargin` para subcategorias (se n√£o existir, use padr√£o mencionado).

Datas:
- Sempre EXIBIR em **DD/MM/YYYY**.
- Filtros de per√≠odo usam `AAAA-MM` (compet√™ncia); agrega√ß√£o considera recognizedAt ‚àà m√™s.

========== IMPLEMENTA√á√ÉO ==========
1) UTILIT√ÅRIOS
- `toISOFromBR("DD/MM/YYYY")` ‚Üí "YYYY-MM-DD"
- `formatBR(isoDate)` ‚Üí "DD/MM/YYYY"
- `getMonthKey(dateBR)` ‚Üí "AAAA-MM"
- `inPeriod(dateBR, periodAAAA_MM)` ‚Üí boolean
- `sum(values[])` seguro.
- `ensureArray(dbKey)` para listas no Replit DB.

2) SUMMARY (GET /api/pj/dashboard/summary)
Entrada: clientId, period=AAAA-MM.
Processo:
- Calcular:
  Receita(P)
  Deducoes(P)
  LucroBruto(P)
  Despesas por grupo (GEA, COMERCIAL_MKT, FINANCEIRAS, OUTRAS) ‚Üí somas absolutas negativas
  DespesasTotais(P)
  LucroLiquido(P)
  MargemAjustada(P) = Receita ‚àí Œ£ despesas onde (group ‚àà {GEA, COMERCIAL_MKT, FINANCEIRAS, OUTRAS}) E (subcategory.excludeFromMargin != true)
- TicketM√©dio(P) = Receita / N¬∫ de Vendas(P).
  N¬∫ de Vendas(P): contar headers em `sales_${clientId}` com date em P (DD/MM/YYYY).
- SaldoCaixa: soma de `bank_tx_${clientId}` (entradas ‚àí sa√≠das) at√© o final de P (se n√£o houver, 0).
- Top3 custos: maiores subcategorias negativas no per√≠odo (por valor absoluto).
Resposta JSON:
{
  period, receita, deducoes, lucroBruto, despesas: { gea, comercialMkt, financeiras, outras, total },
  lucroLiquido, margemAjustada, margemAjustadaPct, ticketMedio, nVendas, saldoCaixa,
  topCosts: [{subcategory, group, amountAbs}]
}

3) TRENDS (GET /api/pj/dashboard/trends)
Entrada: clientId, months=12 (default).
Processo:
- Montar vetor dos √∫ltimos N meses (AAAA-MM) ordenados.
- Para cada m√™s, calcular: Receita, LucroLiquido, MargemAjustada.
Resposta:
{ months: ["AAAA-MM", ...], receita:[], lucroLiquido:[], margemAjustada:[] }

4) TOP COSTS (GET /api/pj/dashboard/top-costs)
Entrada: clientId, period, limit=5
Resposta: { items: [{subcategory, group, amountAbs}] }

5) REVENUE SPLIT (GET /api/pj/dashboard/revenue-split)
Entrada: clientId, period
Processo:
- Distribui√ß√£o da RECEITA por `channel` (loja, ecommerce, marketplace, etc.) OU por `subcategory` (se houver no ledger).
- Caso n√£o haja channels, use subcategorias de RECEITA se existirem; se n√£o, retorne vazio.
Resposta: { labels:[], values:[] }

6) SALES KPIS (GET /api/pj/dashboard/sales-kpis)
Entrada: clientId, period
Resposta:
{
  receita, nVendas, ticketMedio,
  porMetodo: [{method, gross, legs}],   // agregado por payment method
  porCanal: [{channel, gross, nVendas}]
}

7) P√ÅGINA HTML (GET /dashboard/empresa/:clientId)
- Layout com:
  - Seletor de M√™s (AAAA-MM) ‚Üí atualiza cards e gr√°ficos.
  - Cards (grid 2x3): Receita, Dedu√ß√µes, Lucro Bruto, Despesas Totais, Lucro L√≠quido, Margem (ajustada % e valor).
  - Linha: Saldo de Caixa.
  - Gr√°fico linha (Chart.js via CDN): Receita x Lucro L√≠quido x Margem (√∫ltimos 12 meses).
  - Top 3 custos (lista).
  - Pizza "Origem da Receita".
  - KPIs de vendas (Ticket m√©dio e N¬∫ de vendas).
- Usar fetch() para chamar endpoints criados.
- Datas mostradas em **DD/MM/YYYY** (quando houver).
- Sem depend√™ncias adicionais de build; Chart.js via CDN em <script>.

8) PERFORMANCE
- Agrega√ß√µes em mem√≥ria (dataset esperado pequeno no MVP).
- Caso ausentes tabelas de ledger ou sales, trate nulos como cole√ß√µes vazias.

9) ERROS
- 400 se faltar clientId/period.
- 200 com zeros quando cole√ß√µes vazias (n√£o quebrar UI).
- Mensagens claras em JSON.

10) LOGS
- Console: "üìä Dashboard Empres√°rio carregado para {clientId}" quando servir a p√°gina.

11) SEED OPCIONAL
Se `process.env.SEED_DASH === "1"`:
- Criar client de exemplo, 3 meses de dados sint√©ticos em sales/legs e ledger, e alguns bank_tx.
- Datas sempre em **DD/MM/YYYY**.

Finalize atualizando o `server.js` com essas rotas e servindo o HTML simples de dashboard.
Garanta:
- Todas as respostas p√∫blicas j√° venham com datas em **DD/MM/YYYY**.
- N√£o remover funcionalidades j√° existentes (login, OFX/CSV, concilia√ß√£o).
